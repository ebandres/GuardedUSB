
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTkAsigleftTkAndTkOrnonassocTkLessTkLeqTkGeqTkGreaterleftTkPlusTkMinusleftTkMultTkDivTkModleftTkEqualTkNEqualrightTkNotleftTkOBracketTkCBracketleftTkConcatrightTkArrowTkAnd TkArray TkArrow TkAsig TkAtoi TkCBlock TkCBracket TkClosePar TkComma TkConcat TkDeclare TkDiv TkDo TkEqual TkFalse TkFi TkFor TkGeq TkGreater TkGuard TkId TkIf TkIn TkInt TkLeq TkLess TkMax TkMin TkMinus TkMod TkMult TkNEqual TkNot TkNum TkOBlock TkOBracket TkOd TkOpenPar TkOr TkPlus TkPrint TkPrintln TkRead TkRof TkSemiColon TkSize TkSoForth TkString TkTo TkTrue TkTwoPointsblock : TkOBlock TkDeclare start TkCBlock\n             | TkOBlock body TkCBlockbody : sentence body\n            | sentcond body\n            | unique\n            | terminal start : declaration start\n              | declaration bodyempty :declaration : TkId TkTwoPoints tipo TkSemiColon\n                   | TkId TkComma listaid TkTwoPoints tipo TkSemiColonlistaid : TkId TkComma listaid\n               | TkIdtipo : TkInt\n            | TkArray TkOBracket TkNum TkSoForth TkNum TkCBracketassign : TkId TkAsig expressionassign : TkId TkAsig strexpassign : TkId TkAsig arrayarray : TkOBracket inarray TkCBracket\n             | TkOBracket TkNum TkSoForth TkNum TkCBracketinarray : TkNum TkComma inarray\n               | TkNumstrexp : TkString TkConcat strexp\n              | TkStringexpression : expression TkPlus expression\n                  | expression TkMinus expression\n                  | expression TkMult expression\n                  | expression TkDiv expression\n                  | expression TkMod expressionexpression : TkOpenPar expression TkCloseParexpression : TkSize TkOpenPar TkId TkClosePar\n                  | TkMax TkOpenPar TkId TkClosePar\n                  | TkMin TkOpenPar TkId TkClosePar\n                  | TkAtoi TkOpenPar TkId TkCloseParexpression : TkNumexpression : TkIdexpression : expression TkLess expression\n                  | expression TkLeq expression\n                  | expression TkGeq expression\n                  | expression TkGreater expression\n                  | expression TkOr expression\n                  | expression TkAnd expression\n                  | expression TkEqual expression\n                  | expression TkNEqual expressionexpression : TkTrueexpression : TkFalseexpression : TkNot expressionread : TkRead TkIdgfor : TkFor TkId TkIn expression TkTo expression TkArrow block TkRofgdo : TkDo expression TkArrow block TkOdgif : TkIf expression TkArrow unique guard TkFi  \n           | TkIf expression TkArrow block guard TkFi sentence : assign TkSemiColon\n                | gprint TkSemiColon\n                | gprintln TkSemiColon\n                | read TkSemiColonsentcond : gif TkSemiColon\n                | gdo TkSemiColon\n                | gfor TkSemiColonterminal : gif\n                | gdo\n                | gforunique : assign\n              | gprint\n              | gprintlnguard : TkGuard expression TkArrow unique guard\n             | TkGuard expression TkArrow block guard\n             | emptygprint : TkPrint strprintgprintln : TkPrintln strprintstrprint : TkString TkConcat strprint\n                | TkId TkConcat strprint\n                | TkString\n                | TkId'
    
_lr_action_items = {'TkOBlock':([0,68,88,156,157,],[2,2,2,2,2,]),'$end':([1,26,55,],[0,-2,-1,]),'TkDeclare':([2,],[3,]),'TkId':([2,3,5,6,17,18,19,20,21,22,24,29,30,31,32,33,34,35,36,43,52,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,89,125,127,134,142,154,156,],[16,25,16,16,39,39,41,45,45,54,58,-53,-54,-55,-56,-57,-58,-59,45,45,45,93,39,39,16,45,45,45,45,45,45,45,45,45,45,45,45,45,119,120,121,122,45,-10,93,45,45,-11,16,]),'TkPrint':([2,5,6,24,29,30,31,32,33,34,35,68,125,154,156,],[17,17,17,17,-53,-54,-55,-56,-57,-58,-59,17,-10,-11,17,]),'TkPrintln':([2,5,6,24,29,30,31,32,33,34,35,68,125,154,156,],[18,18,18,18,-53,-54,-55,-56,-57,-58,-59,18,-10,-11,18,]),'TkRead':([2,5,6,24,29,30,31,32,33,34,35,125,154,],[19,19,19,19,-53,-54,-55,-56,-57,-58,-59,-10,-11,]),'TkIf':([2,5,6,24,29,30,31,32,33,34,35,125,154,],[20,20,20,20,-53,-54,-55,-56,-57,-58,-59,-10,-11,]),'TkDo':([2,5,6,24,29,30,31,32,33,34,35,125,154,],[21,21,21,21,-53,-54,-55,-56,-57,-58,-59,-10,-11,]),'TkFor':([2,5,6,24,29,30,31,32,33,34,35,125,154,],[22,22,22,22,-53,-54,-55,-56,-57,-58,-59,-10,-11,]),'TkCBlock':([4,7,8,9,10,11,13,14,15,23,27,28,37,38,39,40,45,49,50,51,56,57,61,62,63,64,87,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,129,130,137,138,139,140,141,149,151,155,165,],[26,-5,-6,-63,-64,-65,-60,-61,-62,55,-3,-4,-69,-73,-74,-70,-36,-35,-45,-46,-7,-8,-16,-17,-18,-24,-47,-71,-72,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,-23,-19,-31,-32,-33,-34,-50,-51,-52,-20,-49,]),'TkSemiColon':([9,10,11,12,13,14,15,37,38,39,40,41,45,49,50,51,61,62,63,64,87,90,91,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,129,130,137,138,139,140,141,145,149,151,155,162,165,],[29,30,31,32,33,34,35,-69,-73,-74,-70,-48,-36,-35,-45,-46,-16,-17,-18,-24,-47,125,-14,-71,-72,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,-23,-19,-31,-32,-33,-34,-50,154,-51,-52,-20,-15,-49,]),'TkAsig':([16,58,],[36,36,]),'TkString':([17,18,36,66,67,95,],[38,38,64,38,38,64,]),'TkOpenPar':([20,21,36,43,44,46,47,48,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[43,43,43,43,83,84,85,86,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'TkSize':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'TkMax':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'TkMin':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'TkAtoi':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TkNum':([20,21,36,43,52,65,69,70,71,72,73,74,75,76,77,78,79,80,81,89,126,131,132,134,142,153,],[49,49,49,49,49,97,49,49,49,49,49,49,49,49,49,49,49,49,49,49,143,146,147,49,49,158,]),'TkTrue':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'TkFalse':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'TkNot':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'TkTwoPoints':([25,58,93,94,144,],[59,59,-13,128,-12,]),'TkComma':([25,58,93,97,147,],[60,60,127,132,132,]),'TkGuard':([26,37,38,39,40,45,49,50,51,55,61,62,63,64,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,129,130,137,138,139,140,155,159,160,],[-2,-69,-73,-74,-70,-36,-35,-45,-46,-1,-16,-17,-18,-24,-47,-71,-72,134,134,-63,-64,-65,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,-23,-19,-31,-32,-33,-34,-20,134,134,]),'TkFi':([26,37,38,39,40,45,49,50,51,55,61,62,63,64,87,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,129,130,133,135,136,137,138,139,140,155,159,160,163,164,],[-2,-69,-73,-74,-70,-36,-35,-45,-46,-1,-16,-17,-18,-24,-47,-71,-72,-9,-9,-63,-64,-65,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,-23,-19,149,-68,151,-31,-32,-33,-34,-20,-9,-9,-66,-67,]),'TkOd':([26,55,123,],[-2,-1,141,]),'TkRof':([26,55,161,],[-2,-1,165,]),'TkOBracket':([36,92,],[65,126,]),'TkConcat':([38,39,64,],[66,67,95,]),'TkArrow':([42,45,49,50,51,53,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,137,138,139,140,150,152,],[68,-36,-35,-45,-46,88,-47,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,-31,-32,-33,-34,156,157,]),'TkPlus':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[69,-36,-35,-45,-46,69,69,69,-47,-25,-26,-27,-28,-29,69,69,69,69,69,69,-43,-44,-30,69,-31,-32,-33,-34,69,69,]),'TkMinus':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[70,-36,-35,-45,-46,70,70,70,-47,-25,-26,-27,-28,-29,70,70,70,70,70,70,-43,-44,-30,70,-31,-32,-33,-34,70,70,]),'TkMult':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[71,-36,-35,-45,-46,71,71,71,-47,71,71,-27,-28,-29,71,71,71,71,71,71,-43,-44,-30,71,-31,-32,-33,-34,71,71,]),'TkDiv':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[72,-36,-35,-45,-46,72,72,72,-47,72,72,-27,-28,-29,72,72,72,72,72,72,-43,-44,-30,72,-31,-32,-33,-34,72,72,]),'TkMod':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[73,-36,-35,-45,-46,73,73,73,-47,73,73,-27,-28,-29,73,73,73,73,73,73,-43,-44,-30,73,-31,-32,-33,-34,73,73,]),'TkLess':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[74,-36,-35,-45,-46,74,74,74,-47,-25,-26,-27,-28,-29,None,None,None,None,74,74,-43,-44,-30,74,-31,-32,-33,-34,74,74,]),'TkLeq':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[75,-36,-35,-45,-46,75,75,75,-47,-25,-26,-27,-28,-29,None,None,None,None,75,75,-43,-44,-30,75,-31,-32,-33,-34,75,75,]),'TkGeq':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[76,-36,-35,-45,-46,76,76,76,-47,-25,-26,-27,-28,-29,None,None,None,None,76,76,-43,-44,-30,76,-31,-32,-33,-34,76,76,]),'TkGreater':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[77,-36,-35,-45,-46,77,77,77,-47,-25,-26,-27,-28,-29,None,None,None,None,77,77,-43,-44,-30,77,-31,-32,-33,-34,77,77,]),'TkOr':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[78,-36,-35,-45,-46,78,78,78,-47,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,78,-31,-32,-33,-34,78,78,]),'TkAnd':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[79,-36,-35,-45,-46,79,79,79,-47,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,79,-31,-32,-33,-34,79,79,]),'TkEqual':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[80,-36,-35,-45,-46,80,80,80,-47,80,80,80,80,80,80,80,80,80,80,80,-43,-44,-30,80,-31,-32,-33,-34,80,80,]),'TkNEqual':([42,45,49,50,51,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,150,152,],[81,-36,-35,-45,-46,81,81,81,-47,81,81,81,81,81,81,81,81,81,81,81,-43,-44,-30,81,-31,-32,-33,-34,81,81,]),'TkClosePar':([45,49,50,51,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,137,138,139,140,],[-36,-35,-45,-46,118,-47,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,137,138,139,140,-31,-32,-33,-34,]),'TkTo':([45,49,50,51,87,105,106,107,108,109,110,111,112,113,114,115,116,117,118,124,137,138,139,140,],[-36,-35,-45,-46,-47,-25,-26,-27,-28,-29,-37,-38,-39,-40,-41,-42,-43,-44,-30,142,-31,-32,-33,-34,]),'TkIn':([54,],[89,]),'TkInt':([59,128,],[91,91,]),'TkArray':([59,128,],[92,92,]),'TkCBracket':([96,97,146,147,148,158,],[130,-22,155,-22,-21,162,]),'TkSoForth':([97,143,],[131,153,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,68,88,156,157,],[1,101,123,160,161,]),'body':([2,5,6,24,],[4,27,28,57,]),'sentence':([2,5,6,24,],[5,5,5,5,]),'sentcond':([2,5,6,24,],[6,6,6,6,]),'unique':([2,5,6,24,68,156,],[7,7,7,7,100,159,]),'terminal':([2,5,6,24,],[8,8,8,8,]),'assign':([2,5,6,24,68,156,],[9,9,9,9,102,102,]),'gprint':([2,5,6,24,68,156,],[10,10,10,10,103,103,]),'gprintln':([2,5,6,24,68,156,],[11,11,11,11,104,104,]),'read':([2,5,6,24,],[12,12,12,12,]),'gif':([2,5,6,24,],[13,13,13,13,]),'gdo':([2,5,6,24,],[14,14,14,14,]),'gfor':([2,5,6,24,],[15,15,15,15,]),'start':([3,24,],[23,56,]),'declaration':([3,24,],[24,24,]),'strprint':([17,18,66,67,],[37,40,98,99,]),'expression':([20,21,36,43,52,69,70,71,72,73,74,75,76,77,78,79,80,81,89,134,142,],[42,53,61,82,87,105,106,107,108,109,110,111,112,113,114,115,116,117,124,150,152,]),'strexp':([36,95,],[62,129,]),'array':([36,],[63,]),'tipo':([59,128,],[90,145,]),'listaid':([60,127,],[94,144,]),'inarray':([65,132,],[96,148,]),'guard':([100,101,159,160,],[133,136,163,164,]),'empty':([100,101,159,160,],[135,135,135,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> TkOBlock TkDeclare start TkCBlock','block',4,'p_code','Parser.py',28),
  ('block -> TkOBlock body TkCBlock','block',3,'p_code','Parser.py',29),
  ('body -> sentence body','body',2,'p_body','Parser.py',39),
  ('body -> sentcond body','body',2,'p_body','Parser.py',40),
  ('body -> unique','body',1,'p_body','Parser.py',41),
  ('body -> terminal','body',1,'p_body','Parser.py',42),
  ('start -> declaration start','start',2,'p_start','Parser.py',52),
  ('start -> declaration body','start',2,'p_start','Parser.py',53),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',57),
  ('declaration -> TkId TkTwoPoints tipo TkSemiColon','declaration',4,'p_declaration','Parser.py',61),
  ('declaration -> TkId TkComma listaid TkTwoPoints tipo TkSemiColon','declaration',6,'p_declaration','Parser.py',62),
  ('listaid -> TkId TkComma listaid','listaid',3,'p_listid','Parser.py',69),
  ('listaid -> TkId','listaid',1,'p_listid','Parser.py',70),
  ('tipo -> TkInt','tipo',1,'p_tipo','Parser.py',77),
  ('tipo -> TkArray TkOBracket TkNum TkSoForth TkNum TkCBracket','tipo',6,'p_tipo','Parser.py',78),
  ('assign -> TkId TkAsig expression','assign',3,'p_assign_expr','Parser.py',81),
  ('assign -> TkId TkAsig strexp','assign',3,'p_assign_str','Parser.py',87),
  ('assign -> TkId TkAsig array','assign',3,'p_assign_arr','Parser.py',93),
  ('array -> TkOBracket inarray TkCBracket','array',3,'p_array','Parser.py',99),
  ('array -> TkOBracket TkNum TkSoForth TkNum TkCBracket','array',5,'p_array','Parser.py',100),
  ('inarray -> TkNum TkComma inarray','inarray',3,'p_iarray','Parser.py',103),
  ('inarray -> TkNum','inarray',1,'p_iarray','Parser.py',104),
  ('strexp -> TkString TkConcat strexp','strexp',3,'p_expression_str','Parser.py',107),
  ('strexp -> TkString','strexp',1,'p_expression_str','Parser.py',108),
  ('expression -> expression TkPlus expression','expression',3,'p_expression_bin','Parser.py',112),
  ('expression -> expression TkMinus expression','expression',3,'p_expression_bin','Parser.py',113),
  ('expression -> expression TkMult expression','expression',3,'p_expression_bin','Parser.py',114),
  ('expression -> expression TkDiv expression','expression',3,'p_expression_bin','Parser.py',115),
  ('expression -> expression TkMod expression','expression',3,'p_expression_bin','Parser.py',116),
  ('expression -> TkOpenPar expression TkClosePar','expression',3,'p_expression_group','Parser.py',138),
  ('expression -> TkSize TkOpenPar TkId TkClosePar','expression',4,'p_expression_fun','Parser.py',143),
  ('expression -> TkMax TkOpenPar TkId TkClosePar','expression',4,'p_expression_fun','Parser.py',144),
  ('expression -> TkMin TkOpenPar TkId TkClosePar','expression',4,'p_expression_fun','Parser.py',145),
  ('expression -> TkAtoi TkOpenPar TkId TkClosePar','expression',4,'p_expression_fun','Parser.py',146),
  ('expression -> TkNum','expression',1,'p_expression_number','Parser.py',151),
  ('expression -> TkId','expression',1,'p_expression_id','Parser.py',157),
  ('expression -> expression TkLess expression','expression',3,'p_boolean_exp','Parser.py',167),
  ('expression -> expression TkLeq expression','expression',3,'p_boolean_exp','Parser.py',168),
  ('expression -> expression TkGeq expression','expression',3,'p_boolean_exp','Parser.py',169),
  ('expression -> expression TkGreater expression','expression',3,'p_boolean_exp','Parser.py',170),
  ('expression -> expression TkOr expression','expression',3,'p_boolean_exp','Parser.py',171),
  ('expression -> expression TkAnd expression','expression',3,'p_boolean_exp','Parser.py',172),
  ('expression -> expression TkEqual expression','expression',3,'p_boolean_exp','Parser.py',173),
  ('expression -> expression TkNEqual expression','expression',3,'p_boolean_exp','Parser.py',174),
  ('expression -> TkTrue','expression',1,'p_expression_true','Parser.py',208),
  ('expression -> TkFalse','expression',1,'p_expression_false','Parser.py',214),
  ('expression -> TkNot expression','expression',2,'p_expression_not','Parser.py',221),
  ('read -> TkRead TkId','read',2,'p_read','Parser.py',225),
  ('gfor -> TkFor TkId TkIn expression TkTo expression TkArrow block TkRof','gfor',9,'p_cycle_for','Parser.py',231),
  ('gdo -> TkDo expression TkArrow block TkOd','gdo',5,'p_cycle_do','Parser.py',236),
  ('gif -> TkIf expression TkArrow unique guard TkFi','gif',6,'p_if','Parser.py',240),
  ('gif -> TkIf expression TkArrow block guard TkFi','gif',6,'p_if','Parser.py',241),
  ('sentence -> assign TkSemiColon','sentence',2,'p_sentence','Parser.py',245),
  ('sentence -> gprint TkSemiColon','sentence',2,'p_sentence','Parser.py',246),
  ('sentence -> gprintln TkSemiColon','sentence',2,'p_sentence','Parser.py',247),
  ('sentence -> read TkSemiColon','sentence',2,'p_sentence','Parser.py',248),
  ('sentcond -> gif TkSemiColon','sentcond',2,'p_sentence_cond','Parser.py',253),
  ('sentcond -> gdo TkSemiColon','sentcond',2,'p_sentence_cond','Parser.py',254),
  ('sentcond -> gfor TkSemiColon','sentcond',2,'p_sentence_cond','Parser.py',255),
  ('terminal -> gif','terminal',1,'p_terminal','Parser.py',259),
  ('terminal -> gdo','terminal',1,'p_terminal','Parser.py',260),
  ('terminal -> gfor','terminal',1,'p_terminal','Parser.py',261),
  ('unique -> assign','unique',1,'p_unique','Parser.py',265),
  ('unique -> gprint','unique',1,'p_unique','Parser.py',266),
  ('unique -> gprintln','unique',1,'p_unique','Parser.py',267),
  ('guard -> TkGuard expression TkArrow unique guard','guard',5,'p_guard','Parser.py',271),
  ('guard -> TkGuard expression TkArrow block guard','guard',5,'p_guard','Parser.py',272),
  ('guard -> empty','guard',1,'p_guard','Parser.py',273),
  ('gprint -> TkPrint strprint','gprint',2,'p_print','Parser.py',278),
  ('gprintln -> TkPrintln strprint','gprintln',2,'p_println','Parser.py',282),
  ('strprint -> TkString TkConcat strprint','strprint',3,'p_strprint','Parser.py',286),
  ('strprint -> TkId TkConcat strprint','strprint',3,'p_strprint','Parser.py',287),
  ('strprint -> TkString','strprint',1,'p_strprint','Parser.py',288),
  ('strprint -> TkId','strprint',1,'p_strprint','Parser.py',289),
]
